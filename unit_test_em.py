#! /usr/bin/env python
""" A unit test script to help with test-driven development of my new 
    EXPECTation MAXimisation method
"""
from chronostar import expectmax as em
import numpy as np
import pdb

def check_columns():
    """ Check that the columns of the membership table sum to the weights
        of the group generated by the fitted model
    """
    return False

def check_rows(Z):
    """ Check that the rows of the membership table sum to 1.000
    """
    return np.max(np.sum(Z,axis=0)) <= 1.0

def check_lnlike():
    return False

def main():
    """ Take the data, take a number of free groups and number of bg groups
        Use EM to find the best fitting groups along with a membership list.
        (**maybe** return some results for data analysis...)
    """
    traceback_file = "data/TWA_BPMG_traceback_25Myr.pkl"
    nfree = 2
    nbg   = 0
    burnin = 100
    steps  = 100

    dummy_model = [0.0,0.0,0.0,0.0,0.0,0.0,
                   0.1,0.1,0.1,
                   0.4,
                   0.0,0.0,0.0,
                   0.5]

    star_params = em.read_stars(traceback_file)

    # initialise dummy_memberships and check validity
    dummy_memberships = np.random.rand(2,len(star_params['xyzuvw']))
    dummy_memberships = dummy_memberships / np.sum(dummy_memberships, axis=0)
    assert check_rows(dummy_memberships)

    lnlike = em.lnlike(dummy_model, star_params, dummy_memberships[0])

    pdb.set_trace()

#    best_fits, memberships, diagnostics =\
#        em.fit_groups(traceback_file, nfree, nbg, burnin, steps)
#    
#    assert check_rows(memberships)
#
main()
